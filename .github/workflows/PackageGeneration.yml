name: Build Packages

on:
  push:
    branches:
      - main
    paths:
      - '**/PKGBUILD'
      - '**/.SRCINFO'
      - '**/*.py'
      - '**/Bookmarks'
      - '**/*.desktop'
      - '**/*.sh'
      - '**/*.png'
      - '**/COPYING'
      - '**/*.install'
      - '**/*.patch'
      - '**/*.service'
      - '**/*.policy'
      - '**/*.toml'
      - '**/*.default'
      - '**/*.timer'
      - '**/*.asc'
      - '**/*.sysusers'
      - '**/*.tmpfiles.conf'
  workflow_dispatch:

jobs:
  build_packages:
    runs-on: ubuntu-latest
    container:
      image: archlinux:latest
      options: --privileged

    steps:
      # Step 2: Install dependencies and prepare directories
      - name: Install dependencies and prepare directories
        run: |
          pacman -Syu --noconfirm base-devel git
          mkdir -p $GITHUB_WORKSPACE/output_dir/pkgs/x86_64
          echo "Dependencies installed and directories created"
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          repository: Leku2020/OwlArchRepo
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 2 
      - name: Mark repository as safe
        run: |
          git config --global --add safe.directory /__w/OwlArchRepo/OwlArchRepo

      - name: Download latest artifact
        id: download-artifact
        uses: actions/github-script@v6
        continue-on-error: true
        with:
          script: |
            const artifacts = await github.rest.actions.listArtifactsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo
            });
      
            console.log("Available artifacts:", artifacts.data.artifacts);
      
            // Filter and sort artifacts by creation date
            const matchingArtifacts = artifacts.data.artifacts
              .filter(artifact => artifact.name.startsWith('packages_artifact-'))
              .sort((a, b) => new Date(b.created_at) - new Date(a.created_at));

            console.log("Matching artifacts:", matchingArtifacts);
            if (matchingArtifacts.length > 0) {
              const latestArtifact = matchingArtifacts[0];
              core.setOutput('artifact_id', latestArtifact.id);
              core.setOutput('artifact_name', latestArtifact.name);
              core.setOutput('wrokflow_run_id', latestArtifact.workflow_run.id);
            } else {
              core.setOutput('artifact_id', '');
              core.setOutput('artifact_name', '');
              core.setOutput('wrokflow_run_id', '');
            }

      - name: Download artifact if exists
        continue-on-error: true
        if: steps.download-artifact.outputs.artifact_id != ''
        uses: actions/download-artifact@v4
        with:
          name: ${{ steps.download-artifact.outputs.artifact_name }}
          run-id: ${{steps.download-artifact.outputs.wrokflow_run_id }}

          path: ${{ github.workspace }}/output_dir
          github-token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}

      - name: Fallback if no artifact exists
        continue-on-error: true
        if: steps.download-artifact.outputs.artifact_id == ''
        run: |
          echo "No matching artifact found. Skipping download."    
      - name: Detect modified paths
        if: steps.download-artifact.outputs.artifact_id != ''
        run: |
          # Fetch the latest changes from the remote repository
          git fetch origin main

          # Compare the last commit (HEAD) with the previous commit (HEAD^)
          git diff --name-only HEAD^ HEAD > modified_paths.txt

          # Filter out .github and pages folders, then extract unique parent directories
          grep -v -e '^\.github/' -e '^pages/' modified_paths.txt | awk -F '/' 'NF >= 2 {print $2}' | sort | uniq > modified_dirs.txt

          # Display the results
          cat $GITHUB_WORKSPACE/modified_paths.txt
          cat $GITHUB_WORKSPACE/modified_dirs.txt
          cd $GITHUB_WORKSPACE
          ls
          pwd
          
      # Step 3: Create non-root user
      - name: Create non-root user
        run: |
          pacman -Sy --noconfirm sudo && \
          useradd -m builder && \
          echo "builder ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers

      # Step 4: Build packages
      - name: Build packages
        if: steps.download-artifact.outputs.artifact_id == ''
        run: |
          mkdir -p $GITHUB_WORKSPACE/output_dir/pkgs/x86_64
          chown -R builder:builder $GITHUB_WORKSPACE && \
          chmod -R u+rwx $GITHUB_WORKSPACE
          cd $GITHUB_WORKSPACE
          su - builder -c "
            export GITHUB_WORKSPACE=\\$GITHUB_WORKSPACE && \
            echo \"GITHUB_WORKSPACE is set to \$GITHUB_WORKSPACE\" && \
            ls \$GITHUB_WORKSPACE && \
            find \$GITHUB_WORKSPACE -type f -name PKGBUILD | while read PKGBUILD; do
              dir=\$(dirname \"\$PKGBUILD\") && \
              echo \"Building package in \$dir\" && \
              cd \"\$dir\" && makepkg -s --noconfirm --skippgpcheck && \
              { [ -d src ] && rm -r src || echo \"Directory 'src' does not exist, skipping removal.\"; } && \
              { [ -d pkg ] && rm -r pkg || echo \"Directory 'pkg' does not exist, skipping removal.\"; } && \
              mv *.pkg.tar.* \$GITHUB_WORKSPACE/output_dir/pkgs/x86_64/ && \
              cd -
            done
          "

          ls -l $GITHUB_WORKSPACE/output_dir/pkgs/x86_64
          echo "Packages created successfully"

      - name: Clean up old packages
        if: steps.download-artifact.outputs.artifact_id != ''
        run: |
          # Eliminar paquetes antiguos en output_dir que coincidan con los nombres de los directorios modificados
          cat modified_dirs.txt | while read -r dir; do
            package_name=$(basename "$dir")
            echo "Cleaning up old packages for $package_name"
            find "$GITHUB_WORKSPACE/output_dir/pkgs/x86_64" -type f -name "${package_name}*.pkg.tar.*" -print -exec rm -f {} \;
          done

      - name: Build modified packages
        if: steps.download-artifact.outputs.artifact_id != ''
        run: |
          chown -R builder:builder $GITHUB_WORKSPACE && \
          chmod -R u+rwx $GITHUB_WORKSPACE
          cd $GITHUB_WORKSPACE
          su - builder -c "
            export GITHUB_WORKSPACE=\\$GITHUB_WORKSPACE && \
            echo \"GITHUB_WORKSPACE is set to \$GITHUB_WORKSPACE\" && \
            cat $GITHUB_WORKSPACE/modified_dirs.txt | while read dir; do
              PKGBUILD_PATH=\"\$GITHUB_WORKSPACE/\$dir/PKGBUILD\"
              if [ -f \"\$PKGBUILD_PATH\" ]; then
                echo \"Building package in \$dir\" && \
                cd \"\$dir\" && makepkg -s --noconfirm --skippgpcheck && \
                { [ -d src ] && rm -r src || echo \"Directory 'src' does not exist, skipping removal.\"; } && \
                { [ -d pkg ] && rm -r pkg || echo \"Directory 'pkg' does not exist, skipping removal.\"; } && \
                mv *.pkg.tar.* \$GITHUB_WORKSPACE/output_dir/pkgs/x86_64/ && \
                cd -
              else
                echo \"No PKGBUILD found in \$dir, skipping.\"
              fi
            done
          "

      - name: Clean up repository database
        run: |
          cd $GITHUB_WORKSPACE/output_dir/pkgs/x86_64
          # Remove existing repository database files
          rm -f OwlArchRepo.db.tar.gz OwlArchRepo.db && echo "Previous DB cleaned up"

      # Step 4: Run repo-add to create the repository database
      - name: Create repository database
        run: |
          pacman -Sy --noconfirm pacman-contrib && echo "Pacman updated"
      
          # Regenerating DB
          cd $GITHUB_WORKSPACE/output_dir/pkgs/x86_64 && repo-add OwlArchRepo.db.tar.gz && echo "The DB has been created"
      
          # Adding valid packages to the DB
          find . -type f -name "*.pkg.tar.*" | while read pkg; do
            echo "Working with: $pkg"
      
            # Verify if the package is valid
            if tar -tf "$pkg" &> /dev/null; then
              echo "Package valid: $pkg"
              repo-add OwlArchRepo.db.tar.gz "$pkg" && echo "Package added: $pkg"
            else
              echo "Removing invalid package: $pkg"
              rm -f "$pkg"
            fi
          done

      # Step 4: Upload packages to GitHub
      - name: Upload packages to GitHub-${{ github.sha }}
        uses: actions/upload-artifact@v4
        with:
          name: packages_artifact-${{ github.sha }}
          path: output_dir
          if-no-files-found: error
          
      - name: Job ID and Package hash
        run: |
          echo "Run ID:"
          echo ${{github.run_id}}
          echo "Package hash:"
          echo packages_artifact-${{ github.sha }}
