name: Build PKGBUILDs

on:
  #push:
   # branches:
    #  - main
  workflow_dispatch:

jobs:
  # Job 1: Compilación
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Build PKGBUILD in Arch Linux Docker container
        run: |
          docker run --rm -v ${{ github.workspace }}:/workspace -w /workspace archlinux:latest /bin/bash -c "
            useradd -m builder && echo 'builder:password' | chpasswd && \
            pacman -Sy --noconfirm sudo base-devel git && \
            echo 'builder ALL=(ALL) NOPASSWD: /usr/bin/pacman' >> /etc/sudoers && \
            chown -R builder:builder /workspace && \
            su - builder -c '
              find /workspace -type f -name PKGBUILD | while read PKGBUILD; do
                dir=\$(dirname \$PKGBUILD)
                echo \"Building package in \$dir\"
                cd \$dir && makepkg -si --noconfirm && cd -
              done
            '"
            
      - name: Upload packages to GitHub
        uses: actions/upload-artifact@v4
        with:
          name: packages
          path: '**/*.pkg.tar.zst'


  deploy_pages:
    runs-on: ubuntu-latest
    needs: build
    steps:

      # Paso 1: Checkout del repositorio
      - name: Checkout repository
        uses: actions/checkout@v3

      # Paso 2: Descargar paquetes desde el job de build
      - name: Download packages from build job
        uses: actions/download-artifact@v4

      # Paso 3: Configurar Git LFS
      - name: Set up Git LFS
        run: |
          git lfs install
          git lfs track "*.pkg.tar.zst" 
          git add .gitattributes
          git commit -m "Track .pkg.tar.zst files with LFS" || echo "No changes to commit"

      # Paso 4: Crear la estructura de carpetas y copiar archivos .pkg.tar.zst
      - name: Copy .pkg.tar.zst files to /pkgs/x86_64
        run: |
          mkdir -p "$GITHUB_WORKSPACE/pkgs/x86_64"
          find packages -type f -name "*.pkg.tar.zst" | while read file; do
            echo "Copying: $file to $GITHUB_WORKSPACE/pkgs/x86_64/"
            cp "$file" "$GITHUB_WORKSPACE/pkgs/x86_64/"
          done
      # Paso 5: Ejecutar repo-add dentro de un contenedor Docker de Arch Linux
      - name: Run repo-add in Arch Linux Docker container
        run: |
          docker run --rm -v ${{ github.workspace }}:/workspace -w /workspace archlinux:latest /bin/bash -c '
            pacman -Sy --noconfirm pacman-contrib && \
            echo "Pacman actualizado" && \
            
            # Eliminar la base de datos existente si existe
            rm -f /workspace/pkgs/x86_64/owlArchRepo.db.tar.gz && \
            echo "Archivo de base de datos eliminado" && \
            
            # Crear la base de datos desde cero
            repo-add /workspace/pkgs/x86_64/owlArchRepo.db.tar.gz && \
            echo "Base de datos creada" && \
            
            # Añadir los paquetes válidos a la base de datos
            cd /workspace/pkgs/x86_64 && \
            echo "Cambiando a directorio /workspace/pkgs/x86_64" && \
            
            find . -type f -name "*.pkg.tar.zst" | while read pkg; do \
              echo "Procesando: $pkg"; \
              
              # Verificar si el paquete es válido
              if tar -I zstd -tf "$pkg" &> /dev/null; then \
                echo "Paquete válido: $pkg"; \
                repo-add /workspace/pkgs/x86_64/owlArchRepo.db.tar.gz "$pkg" && \
                echo "Paquete añadido: $pkg"; \
              else \
                echo "Saltando paquete inválido: $pkg"; \
              fi \
            done'
      
      # Paso 6: Eliminar la carpeta /packages y su contenido
      - name: Delete /packages directory and its contents
        run: |
          echo "Deleting /packages and its contents"
          rm -rf $GITHUB_WORKSPACE/packages    
          
      # Paso 7: Hacer commit y push de la carpeta pkgs/x86_64 actualizada
      - name: Commit and push the updated pkgs/x86_64 directory
        uses: EndBug/add-and-commit@v9
        with:
          author_name: "GitHub Actions"
          author_email: "github-actions@github.com"
          message: "Publish new packages to GitHub Pages"
          add: 'pkgs/x86_64/*'

      # Paso 8: Desplegar a GitHub Pages
      - name: Deploy to GitHub Pages
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "github-actions@github.com"
          git remote set-url origin https://github.com/Leku2020/owlArchRepo.git
          git add .
          git commit -m "Deploy updated packages"
          git lfs install
          git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/Leku2020/owlArchRepo.git
