name: Build PKGBUILDs and deploy pages

on:
  workflow_dispatch:

jobs:
  # PKGBUILDs compilation job
  build_packages:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4
      # Step 2: Generating artifacts from PKGBUILDs
      # Step description:
      # 1. Create builder user
      # 2. Install sudo base-devel and git
      # 3. Adding builder to sudoers
      # 4. Change /workspace owner to builder
      # 5. Getting all de files named PKGBUILD into /workspace
      # 6. Launching makepkg -si to generate each package
      - name: Build packages
        run: |
          docker run --rm -v ${{ github.workspace }}:/$GITHUB_WORKSPACE -w $GITHUB_WORKSPACE archlinux:latest /bin/bash -c "
            useradd -m builder && echo 'builder:password' | chpasswd && \
            pacman -Sy --noconfirm sudo base-devel git && \
            echo 'builder ALL=(ALL) NOPASSWD: /usr/bin/pacman' >> /etc/sudoers && \
            chown -R builder:builder $GITHUB_WORKSPACE && \
            mkdir -p $GITHUB_WORKSPACE/output_dir && \
            chown -R builder:builder $GITHUB_WORKSPACE/output_dir && \
            su - builder -c '
              find $GITHUB_WORKSPACE -type f -name PKGBUILD | while read PKGBUILD; do
                dir=\$(dirname \$PKGBUILD)
                echo \"Building package in \$dir\"
                cd \$dir && makepkg -s --noconfirm --skippgpcheck
                mv *.pkg.tar.zst $GITHUB_WORKSPACE/output_dir/
                cd -
              done
              find $GITHUB_WORKSPACE/output_dir -name "*:*" | while read file; do
                # Rename files by replacing colon with an underscore or another allowed character
                mv "$file" "${file//:/_}"
              done
              ls $GITHUB_WORKSPACE/output_dir
            '"
      - name: List packages
        run: ls $GITHUB_WORKSPACE/output_dir

      # Step 3: Upload packages to GitHub      
      - name: Upload packages to GitHub
        uses: actions/upload-artifact@v4
        with:
          name: build_packages_artifact
          path: /home/runner/work/OwlArchRepo/OwlArchRepo/output_dir
          if-no-files-found: error

  build_pages:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Install Ruby and Bundler
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.0'
          bundler-cache: true

      - name: Install Dependencies
        run: |
          cd pages
          bundle install  
          cd ..

      - name: Copy markdown files from extra and ownSoftware to pages
        run: |
          find extra ownSoftware -type f -name "*.markdown" -exec sh -c '
            for file; do
              # Conserva la estructura de carpetas relativa
              dest="pages/${file%/*}/"
              mkdir -p "$dest"
              cp "$file" "$dest"
            done
          ' sh {} +

      - name: Build with Jekyll
        uses: actions/jekyll-build-pages@v1
        with:
          source: ./pages
          destination: ./output_dir

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with: 
          name: build_pages_artifact
          path: ./output_dir

  prepare_deploy_artifact:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: [build_packages, build_pages]
    steps:
      # Step 2: Download the artifact generated in build_packages into ./build_packages
      - name: Download build_packages artifact
        uses: actions/download-artifact@v4
        with:
          name: build_packages_artifact # Origin artifact name
          path: build_packages  # Downloaded artifact path

      # Step 3: Download the artifact generated in build_pages into ./build_pages
      - name: Download build_pages artifact
        uses: actions/download-artifact@v4
        with:
          name: build_pages_artifact  # Origin artifact name
          path: build_pages  # Downloaded artifact path

      # Step 4: Copy generated packages into /pkgs/x86_64
      - name: Copy generated packages into /pkgs/x86_64
        run: |
          ls $GITHUB_WORKSPACE/build_packages
          mkdir -p "$GITHUB_WORKSPACE/output_dir/pkgs/x86_64"
          cd $GITHUB_WORKSPACE/build_packages
          find . -type f -name "*.pkg.tar.zst" | while read file; do
            echo "Copying: $file to $GITHUB_WORKSPACE/output_dir/pkgs/x86_64"
            cp "$file" "$GITHUB_WORKSPACE/output_dir/pkgs/x86_64"
          done

      # Step 5: Run repo-add in Arch Linux Docker container
      - name: Run repo-add in Arch Linux Docker container
        run: |
          docker run --rm -v ${{ github.workspace }}:/workspace -w /workspace archlinux:latest /bin/bash -c '
            pacman -Sy --noconfirm pacman-contrib && \
            echo "Pacman actualizado" && \

            # Crear la base de datos desde cero
            repo-add output_dir/pkgs/x86_64/OwlArchRepo.db.tar.gz && \
            echo "Base de datos creada" && \
            
            # Añadir los paquetes válidos a la base de datos
            cd  /workspace/output_dir/pkgs/x86_64 && \
            echo "Cambiando a directorio  ./output_dir/pkgs/x86_64" && \
            
            find . -type f -name "*.pkg.tar.zst" | while read pkg; do \
              echo "Procesando: $pkg"; \
              
              # Verificar si el paquete es válido
              if tar -I zstd -tf "$pkg" &> /dev/null; then \
                echo "Paquete válido: $pkg"; \
                repo-add  /workspace/output_dir/pkgs/x86_64/OwlArchRepo.db.tar.gz "$pkg" && \
                echo "Paquete añadido: $pkg"; \
              else \
                echo "Saltando paquete inválido: $pkg"; \
              fi \
            done'

      - name: add jekyll artifact to package artifact
        run: |
          ls $GITHUB_WORKSPACE/build_pages
          tar -xvf "$GITHUB_WORKSPACE/build_pages/artifact.tar" -C "$GITHUB_WORKSPACE/build_pages"
          ls $GITHUB_WORKSPACE/build_pages
          cp -r $GITHUB_WORKSPACE/build_pages/* $GITHUB_WORKSPACE/output_dir/

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with: 
          name: deploy_artifact
          path: output_dir
          
  # Deployment job
  deploy:
    if: github.ref == 'refs/heads/main'
    # Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
    permissions:
      contents: read
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: prepare_deploy_artifact
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        with:
          artifact_name: deploy_artifact

  detect_modified_paths:
    if: startsWith(github.ref, 'refs/heads/feature/')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Detect modified paths
        run: |
          git fetch origin main
          git diff --name-only origin/main...HEAD > modified_paths.txt
          cat modified_paths.txt

      - name: Filter and build modified packages
        run: |
          modified_dirs=$(cat modified_paths.txt | grep -E '^(extra|ownSoftware)/' | xargs -I {} dirname {} | sort | uniq)
          if [ -z "$modified_dirs" ]; then
            echo "No modified directories in 'extra/' or 'ownSoftware/'"
            exit 0
          fi
          docker run --rm -v ${{ github.workspace }}:/$GITHUB_WORKSPACE -w $GITHUB_WORKSPACE archlinux:latest /bin/bash -c "
            useradd -m builder && echo 'builder:password' | chpasswd && \
            pacman -Sy --noconfirm sudo base-devel git && \
            echo 'builder ALL=(ALL) NOPASSWD: /usr/bin/pacman' >> /etc/sudoers && \
            chown -R builder:builder $GITHUB_WORKSPACE && \
            mkdir -p $GITHUB_WORKSPACE/output_dir && \
            chown -R builder:builder $GITHUB_WORKSPACE/output_dir && \
            su - builder -c '
              for dir in $modified_dirs; do
                if [ -f \$dir/PKGBUILD ]; then
                  echo \"Building package in \$dir\"
                  cd \$dir && makepkg -si --noconfirm
                  mv *.pkg.tar.zst $GITHUB_WORKSPACE/output_dir/
                  cd -
                fi
              done
              ls $GITHUB_WORKSPACE/output_dir
            '"

      - name: Upload modified packages
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: modified_packages_artifact
          path: /home/runner/work/OwlArchRepo/OwlArchRepo/output_dir
          if-no-files-found: error
